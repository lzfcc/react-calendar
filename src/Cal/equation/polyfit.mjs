import { lusolve, transpose, multiply, matrix, pow } from 'mathjs'
const points = [
    { x: 1, y: 1.2071 },
    { x: 2, y: 1.2065 },
    { x: 3, y: 1.2059 },
    { x: 4, y: 1.2053 },
    { x: 5, y: 1.2047 },
    { x: 6, y: 1.204 },
    { x: 7, y: 1.2033 },
    { x: 8, y: 1.2026 },
    { x: 9, y: 1.2019 },
    { x: 10, y: 1.2012 },
    { x: 11, y: 1.2004 },
    { x: 12, y: 1.1996 },
    { x: 13, y: 1.1988 },
    { x: 14, y: 1.198 },
    { x: 15, y: 1.1972 },
    { x: 16, y: 1.1963 },
    { x: 17, y: 1.1955 },
    { x: 18, y: 1.1946 },
    { x: 19, y: 1.1937 },
    { x: 20, y: 1.1927 },
    { x: 21, y: 1.1918 },
    { x: 22, y: 1.1908 },
    { x: 23, y: 1.1898 },
    { x: 24, y: 1.1888 },
    { x: 25, y: 1.1878 },
    { x: 26, y: 1.1867 },
    { x: 27, y: 1.1856 },
    { x: 28, y: 1.1846 },
    { x: 29, y: 1.1835 },
    { x: 30, y: 1.1823 },
    { x: 31, y: 1.1812 },
    { x: 32, y: 1.18 },
    { x: 33, y: 1.1788 },
    { x: 34, y: 1.1776 },
    { x: 35, y: 1.1764 },
    { x: 36, y: 1.1751 },
    { x: 37, y: 1.1739 },
    { x: 38, y: 1.1726 },
    { x: 39, y: 1.1713 },
    { x: 40, y: 1.17 },
    { x: 41, y: 1.1686 },
    { x: 42, y: 1.1673 },
    { x: 43, y: 1.1659 },
    { x: 44, y: 1.1645 },
    { x: 45, y: 1.1631 },
    { x: 46, y: 1.1616 },
    { x: 47, y: 1.1602 },
    { x: 48, y: 1.1587 },
    { x: 49, y: 1.1572 },
    { x: 50, y: 1.1557 },
    { x: 51, y: 1.1541 },
    { x: 52, y: 1.1526 },
    { x: 53, y: 1.151 },
    { x: 54, y: 1.1494 },
    { x: 55, y: 1.1478 },
    { x: 56, y: 1.1462 },
    { x: 57, y: 1.1445 },
    { x: 58, y: 1.1428 },
    { x: 59, y: 1.1411 },
    { x: 60, y: 1.1394 },
    { x: 61, y: 1.1377 },
    { x: 62, y: 1.1359 },
    { x: 63, y: 1.1342 },
    { x: 64, y: 1.1324 },
    { x: 65, y: 1.1306 },
    { x: 66, y: 1.1287 },
    { x: 67, y: 1.1269 },
    { x: 68, y: 1.125 },
    { x: 69, y: 1.1231 },
    { x: 70, y: 1.1212 },
    { x: 71, y: 1.1193 },
    { x: 72, y: 1.1174 },
    { x: 73, y: 1.1154 },
    { x: 74, y: 1.1134 },
    { x: 75, y: 1.1114 },
    { x: 76, y: 1.1094 },
    { x: 77, y: 1.1073 },
    { x: 78, y: 1.1053 },
    { x: 79, y: 1.1032 },
    { x: 80, y: 1.1011 },
    { x: 81, y: 1.099 },
    { x: 82, y: 1.0968 },
    { x: 83, y: 1.0966 },
    { x: 84, y: 1.0965 },
    { x: 85, y: 1.0961 },
    { x: 86, y: 1.0959 },
    { x: 87, y: 1.0958 },
    { x: 88, y: 1.0936 },
    { x: 89, y: 1.0915 },
    { x: 90, y: 1.0894 },
    { x: 91, y: 1.0873 },
    { x: 92, y: 1.0852 },
    { x: 93, y: 1.0832 },
    { x: 94, y: 1.0812 },
    { x: 95, y: 1.0792 },
    { x: 96, y: 1.0772 },
    { x: 97, y: 1.0752 },
    { x: 98, y: 1.0733 },
    { x: 99, y: 1.0713 },
    { x: 100, y: 1.0694 },
    { x: 101, y: 1.0676 },
    { x: 102, y: 1.0657 },
    { x: 103, y: 1.0638 },
    { x: 104, y: 1.062 },
    { x: 105, y: 1.0602 },
    { x: 106, y: 1.0584 },
    { x: 107, y: 1.0566 },
    { x: 108, y: 1.0549 },
    { x: 109, y: 1.0531 },
    { x: 110, y: 1.0514 },
    { x: 111, y: 1.0497 },
    { x: 112, y: 1.0481 },
    { x: 113, y: 1.0464 },
    { x: 114, y: 1.0448 },
    { x: 115, y: 1.0432 },
    { x: 116, y: 1.0416 },
    { x: 117, y: 1.04 },
    { x: 118, y: 1.0384 },
    { x: 119, y: 1.0369 },
    { x: 120, y: 1.0354 },
    { x: 121, y: 1.0339 },
    { x: 122, y: 1.0324 },
    { x: 123, y: 1.0309 },
    { x: 124, y: 1.0295 },
    { x: 125, y: 1.0281 },
    { x: 126, y: 1.0267 },
    { x: 127, y: 1.0253 },
    { x: 128, y: 1.0239 },
    { x: 129, y: 1.0226 },
    { x: 130, y: 1.0213 },
    { x: 131, y: 1.02 },
    { x: 132, y: 1.0187 },
    { x: 133, y: 1.0174 },
    { x: 134, y: 1.0162 },
    { x: 135, y: 1.015 },
    { x: 136, y: 1.0138 },
    { x: 137, y: 1.0126 },
    { x: 138, y: 1.0114 },
    { x: 139, y: 1.0103 },
    { x: 140, y: 1.0091 },
    { x: 141, y: 1.008 },
    { x: 142, y: 1.0069 },
    { x: 143, y: 1.0059 },
    { x: 144, y: 1.0048 },
    { x: 145, y: 1.0038 },
    { x: 146, y: 1.0028 },
    { x: 147, y: 1.0018 },
    { x: 148, y: 1.0008 },
    { x: 149, y: 0.9999 },
    { x: 150, y: 0.9985 },
    { x: 151, y: 0.998 },
    { x: 152, y: 0.9971 },
    { x: 153, y: 0.9962 },
    { x: 154, y: 0.9954 },
    { x: 155, y: 0.9946 },
    { x: 156, y: 0.9937 },
    { x: 157, y: 0.9929 },
    { x: 158, y: 0.9922 },
    { x: 159, y: 0.9914 },
    { x: 160, y: 0.9907 },
    { x: 161, y: 0.99 },
    { x: 162, y: 0.9893 },
    { x: 163, y: 0.9886 },
    { x: 164, y: 0.9879 },
    { x: 165, y: 0.9873 },
    { x: 166, y: 0.9867 },
    { x: 167, y: 0.9861 },
    { x: 168, y: 0.9855 }]


// 以下多项式拟合代码由ChatGPT生成
const polyfit = (degree, points) => {// 拟合多项式的次数
    degree = parseInt(degree)
    points = JSON.parse(points)
    // 构建矩阵A和向量b
    const A = [];
    const b = [];
    points.forEach(point => {
        const row = [];
        for (let i = degree; i >= 0; i--) {
            row.push(pow(point.x, i));
        }
        A.push(row);
        b.push(point.y);
    });
    // 转换为mathjs的矩阵
    const Am = matrix(A);
    const bm = matrix(b);
    // 使用mathjs函数解最小二乘问题
    const ATAm = multiply(transpose(Am), Am);
    const ATb = multiply(transpose(Am), bm);
    const coefficients = lusolve(ATAm, ATb);
    return (coefficients.toArray().map(e => +e[0].toFixed(10))).toString()
    // 根据系数计算多项式的值
    // function polyfitMain(coefficients, x) {
    //     return coefficients.reduce((sum, value, index) => sum + value * pow(x, coefficients.length - index - 1), 0);
    // }
    // 测试多项式拟合结果
    // const x = 1
    // console.log(`当x=${x}时，多项式的值为:`, polyfitMain(coefficients.toArray().map(e => e[0]), x));
}
// console.log(polyfit(3, '[{ "x": 1, "y": 4 }, { "x": 2, "y": 9 }, { "x": 3, "y": 16 },{ "x": 4, "y": 25 }]'))
const numbers = [1.2071, 1.2065, 1.2059, 1.2053, 1.2047, 1.2040, 1.2033, 1.2026, 1.2019, 1.2012, 1.2004, 1.1996, 1.1988, 1.1980, 1.1972, 1.1963, 1.1955, 1.1946, 1.1937, 1.1927, 1.1918, 1.1908, 1.1898, 1.1888, 1.1878, 1.1867, 1.1856, 1.1846, 1.1835, 1.1823, 1.1812, 1.1800, 1.1788, 1.1776, 1.1764, 1.1751, 1.1739, 1.1726, 1.1713, 1.1700, 1.1686, 1.1673, 1.1659, 1.1645, 1.1631, 1.1616, 1.1602, 1.1587, 1.1572, 1.1557, 1.1541, 1.1526, 1.1510, 1.1494, 1.1478, 1.1462, 1.1445, 1.1428, 1.1411, 1.1394, 1.1377, 1.1359, 1.1342, 1.1324, 1.1306, 1.1287, 1.1269, 1.1250, 1.1231, 1.1212, 1.1193, 1.1174, 1.1154, 1.1134, 1.1114, 1.1094, 1.1073, 1.1053, 1.1032, 1.1011, 1.0990, 1.0968, 1.0966, 1.0965, 1.0961, 1.0959, 1.0958, 1.0936, 1.0915, 1.0894, 1.0873, 1.0852, 1.0832, 1.0812, 1.0792, 1.0772, 1.0752, 1.0733, 1.0713, 1.0694, 1.0676, 1.0657, 1.0638, 1.0620, 1.0602, 1.0584, 1.0566, 1.0549, 1.0531, 1.0514, 1.0497, 1.0481, 1.0464, 1.0448, 1.0432, 1.0416, 1.0400, 1.0384, 1.0369, 1.0354, 1.0339, 1.0324, 1.0309, 1.0295, 1.0281, 1.0267, 1.0253, 1.0239, 1.0226, 1.0213, 1.0200, 1.0187, 1.0174, 1.0162, 1.0150, 1.0138, 1.0126, 1.0114, 1.0103, 1.0091, 1.0080, 1.0069, 1.0059, 1.0048, 1.0038, 1.0028, 1.0018, 1.0008, .9999, .9985, .9980, .9971, .9962, .9954, .9946, .9937, .9929, .9922, .9914, .9907, .9900, .9893, .9886, .9879, .9873, .9867, .9861, .9855]
// 把数组转成对象
const arr2Obj = numbers => numbers.map((value, index) => ({ x: index + 1, y: value }))
// console.log(JSON.stringify(arr2Obj(numbers)))
// console.log(arr2Obj(numbers))
